/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package modules.admin.returning;

import com.github.lgooddatepicker.zinternaltools.Pair;
import data.models.Loan;
import data.models.Member;
import data.repository.LoanRepository;
import data.repository.MemberRepository;
import helpers.AFDialog;
import java.util.ArrayList;
import javax.swing.table.DefaultTableModel;
import modules.shared.DataSelectorFrame;
import modules.shared.DataSelectorFrameInterface;

/**
 *
 * @author Azhar
 */
public class ReturningPanel extends javax.swing.JPanel implements DataSelectorFrameInterface<Member> {
    
    MemberRepository memberRepository = new MemberRepository();
    ArrayList<Member> members;
    Member selectedMember;
    
    LoanRepository loanRepository = new LoanRepository();
    ArrayList<Loan> loanList = new ArrayList<>();
    ArrayList<Loan> tempLoanList = new ArrayList<>();
    
    ArrayList<Loan> returningList = new ArrayList<>();

    /**
     * Creates new form ReturningPanel
     */
    public ReturningPanel() {
        initComponents();
        
        //new Thread(this::populateBooksData).start();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        textFieldMember = new javax.swing.JTextField();
        btnSelectMember = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblReturningBook = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblBorrowedBook = new javax.swing.JTable();
        btnLeft = new javax.swing.JButton();
        btnRight = new javax.swing.JButton();
        btnSubmit = new javax.swing.JButton();

        setBackground(new java.awt.Color(246, 241, 222));
        setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel1.setFont(new java.awt.Font("Helvetica Neue", 1, 18)); // NOI18N
        jLabel1.setText("Return Book");

        jLabel4.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        jLabel4.setText("Member");

        textFieldMember.setEditable(false);
        textFieldMember.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N

        btnSelectMember.setText("...");
        btnSelectMember.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSelectMemberActionPerformed(evt);
            }
        });

        tblReturningBook.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        tblReturningBook.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "No", "Book Title", "Copy ID"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblReturningBook);

        tblBorrowedBook.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        tblBorrowedBook.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "No", "Book Title", "Copy ID", "Borrow Date", "Due Date"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tblBorrowedBook);

        btnLeft.setBackground(new java.awt.Color(255, 102, 102));
        btnLeft.setFont(new java.awt.Font("Avenir Next", 1, 14)); // NOI18N
        btnLeft.setForeground(new java.awt.Color(0, 0, 0));
        btnLeft.setText("< Cancel");
        btnLeft.setMaximumSize(new java.awt.Dimension(100, 30));
        btnLeft.setMinimumSize(new java.awt.Dimension(100, 30));
        btnLeft.setPreferredSize(new java.awt.Dimension(100, 30));
        btnLeft.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLeftActionPerformed(evt);
            }
        });

        btnRight.setBackground(new java.awt.Color(138, 178, 166));
        btnRight.setFont(new java.awt.Font("Avenir Next", 1, 14)); // NOI18N
        btnRight.setForeground(new java.awt.Color(0, 0, 0));
        btnRight.setText("Return >");
        btnRight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRightActionPerformed(evt);
            }
        });

        btnSubmit.setBackground(new java.awt.Color(138, 178, 166));
        btnSubmit.setFont(new java.awt.Font("Avenir Next", 1, 14)); // NOI18N
        btnSubmit.setForeground(new java.awt.Color(0, 0, 0));
        btnSubmit.setText("Submit");
        btnSubmit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSubmitActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(textFieldMember, javax.swing.GroupLayout.PREFERRED_SIZE, 322, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnSelectMember))
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 594, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnLeft, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnRight, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnSubmit, javax.swing.GroupLayout.PREFERRED_SIZE, 355, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 355, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(73, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(textFieldMember, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSelectMember))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(155, 155, 155)
                        .addComponent(btnRight)
                        .addGap(18, 18, 18)
                        .addComponent(btnLeft, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 444, Short.MAX_VALUE)
                    .addComponent(jScrollPane2))
                .addGap(18, 18, 18)
                .addComponent(btnSubmit)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnSelectMemberActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSelectMemberActionPerformed
        showMemberSelector();
    }//GEN-LAST:event_btnSelectMemberActionPerformed

    private void btnLeftActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLeftActionPerformed
        int row = tblReturningBook.getSelectedRow();
        Loan loan = returningList.get(row);
        
        returningList.remove(loan);
        tempLoanList.add(loan);
        
        drawLoanTable();
        drawReturningTable();
    }//GEN-LAST:event_btnLeftActionPerformed

    private void btnRightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRightActionPerformed
        int row = tblBorrowedBook.getSelectedRow();
        Loan loan = tempLoanList.get(row);
        
        tempLoanList.remove(loan);
        returningList.add(loan);
        
        drawLoanTable();
        drawReturningTable();
    }//GEN-LAST:event_btnRightActionPerformed

    private void btnSubmitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSubmitActionPerformed
        for(Loan loan : returningList) {
            try {
                loanRepository.update(loan);
            } catch (Exception ex) {
                AFDialog.showError(this, ex.getLocalizedMessage());
                return;
            }
        }
        AFDialog.showMessage(this, "Data saved successfully.");
        
        returningList.clear();
        tempLoanList.clear();
        loanList.clear();
        selectedMember = null;
        
        textFieldMember.setText("");
        drawLoanTable();
        drawReturningTable();
    }//GEN-LAST:event_btnSubmitActionPerformed

    private void populateBooksData() {
        loanList = new ArrayList<>();
        loanList = loanRepository.populateByMemberId(selectedMember.id);
        tempLoanList = loanList;
        drawLoanTable();
    }
    
    private void drawLoanTable() {
        DefaultTableModel model = (DefaultTableModel) tblBorrowedBook.getModel();
        model.setRowCount(0);
        
        for (int i=0; i<tempLoanList.size(); i++) {
            Loan loan = tempLoanList.get(i);
            model.addRow(new Object[] {i+1, loan.bookTitle, loan.copyId, loan.loanDate, loan.dueDate});
        }
    }
    
    private void drawReturningTable() {
        DefaultTableModel model = (DefaultTableModel) tblReturningBook.getModel();
        model.setRowCount(0);
        
        for (int i=0; i<returningList.size(); i++) {
            Loan loan = returningList.get(i);
            model.addRow(new Object[] {i+1, loan.bookTitle, loan.copyId});
        }
    }
    
    private void showMemberSelector() {
        DataSelectorFrame frame = new DataSelectorFrame(this);
        frame.setTitle("Select Member");
        String[] column = {"Name", "Email", "Phone Number"};
        frame.setupTableColumn(column);
        
        frame.setVisible(true);
        frame.populateData();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnLeft;
    private javax.swing.JButton btnRight;
    private javax.swing.JButton btnSelectMember;
    private javax.swing.JButton btnSubmit;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable tblBorrowedBook;
    private javax.swing.JTable tblReturningBook;
    private javax.swing.JTextField textFieldMember;
    // End of variables declaration//GEN-END:variables

    @Override
    public void dataSelectorOnDataSelected(Member data) {
        selectedMember = data;
        textFieldMember.setText(selectedMember.firstName + " " + selectedMember.lastName);
        populateBooksData();
    }

    @Override
    public Pair<ArrayList<Member>, ArrayList<Object[]>> dataSelectorProvideData(String query) {
        members = new ArrayList<>();
        members = memberRepository.populate(query);
        
        Pair<ArrayList<Member>, ArrayList<Object[]>> data = new Pair<>(new ArrayList<>(), new ArrayList<>());
        data.first = members;
        
        for(Member obj : members) {
            data.second.add(new Object[] {obj.firstName + " " + obj.lastName, obj.email, obj.phoneNumber});
        }
        return data;
    }
}
