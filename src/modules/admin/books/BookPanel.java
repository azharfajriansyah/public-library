/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package modules.admin.books;

import com.github.lgooddatepicker.components.DatePicker;
import com.github.lgooddatepicker.zinternaltools.Pair;
import data.models.Author;
import data.models.Book;
import data.models.Publisher;
import data.repository.AuthorRepository;
import data.repository.BookRepository;
import data.repository.PublisherRepository;
import helpers.AFDialog;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import modules.shared.DataSelectorFrame;
import modules.shared.DataSelectorFrameInterface;
import modules.shared.RegularDataTablePanel;
import modules.shared.RegularDataTablePanelInterface;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.view.JasperViewer;

/**
 *
 * @author Azhar
 */
public class BookPanel extends javax.swing.JPanel implements RegularDataTablePanelInterface, DataSelectorFrameInterface {
    
    ArrayList<Book> books;
    Book editedBook;
    RegularDataTablePanel regularDataTablePanel;
    DatePicker datePicker;
    BookRepository repository = new BookRepository();
    Author selectedAuthor;
    Publisher selectedPublisher;
    boolean isSelectingAuthor = false;
    boolean isSelectingPublisher = false;

    /**
     * Creates new form BookPanel
     */
    public BookPanel() {
        initComponents();
        
        regularDataTablePanel = new RegularDataTablePanel(this);
        
        String[] column = {"Title", "ISBN", "Publisher", "Publication Year", "Genre", "Languages", "Cover Image"};
        regularDataTablePanel.setupTableColumn(column);
        
        pnlDataTable.setLayout(new java.awt.BorderLayout());
        pnlDataTable.removeAll();
        pnlDataTable.add(regularDataTablePanel);
        pnlDataTable.validate();
        
        new Thread(regularDataTablePanel::populateData).start();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlDataTable = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        btnSave = new javax.swing.JButton();
        btnClear = new javax.swing.JButton();
        textFieldPublisher = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        textFieldISBN = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        textFieldTitle = new javax.swing.JTextField();
        textFieldAuthor = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        comboBoxGenre = new javax.swing.JComboBox<>();
        comboBoxLanguage = new javax.swing.JComboBox<>();
        textFieldNumberOfPages = new javax.swing.JTextField();
        btnSelectAuthor = new javax.swing.JButton();
        jLabel10 = new javax.swing.JLabel();
        textFieldCoverImageURL = new javax.swing.JTextField();
        btnSelectPublisher = new javax.swing.JButton();
        textFieldPublicationYear = new javax.swing.JTextField();

        setBackground(new java.awt.Color(246, 241, 222));

        pnlDataTable.setBackground(new java.awt.Color(246, 241, 222));

        javax.swing.GroupLayout pnlDataTableLayout = new javax.swing.GroupLayout(pnlDataTable);
        pnlDataTable.setLayout(pnlDataTableLayout);
        pnlDataTableLayout.setHorizontalGroup(
            pnlDataTableLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        pnlDataTableLayout.setVerticalGroup(
            pnlDataTableLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 655, Short.MAX_VALUE)
        );

        jPanel1.setBackground(new java.awt.Color(246, 241, 222));
        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel1.setFont(new java.awt.Font("Helvetica Neue", 1, 18)); // NOI18N
        jLabel1.setText("Book");

        jLabel2.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        jLabel2.setText("Title");

        jLabel3.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        jLabel3.setText("Publisher");

        btnSave.setBackground(new java.awt.Color(138, 178, 166));
        btnSave.setFont(new java.awt.Font("Avenir Next", 1, 14)); // NOI18N
        btnSave.setForeground(new java.awt.Color(0, 0, 0));
        btnSave.setText("Save");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        btnClear.setFont(new java.awt.Font("Avenir Next", 1, 14)); // NOI18N
        btnClear.setText("Clear");
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });

        textFieldPublisher.setEditable(false);
        textFieldPublisher.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N

        jLabel4.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        jLabel4.setText("ISBN");

        textFieldISBN.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N

        jLabel5.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        jLabel5.setText("Publication Year");

        jLabel6.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        jLabel6.setText("Language");

        jLabel7.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        jLabel7.setText("Number of Pages");

        jLabel8.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        jLabel8.setText("Author");

        textFieldTitle.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N

        textFieldAuthor.setEditable(false);
        textFieldAuthor.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N

        jLabel9.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        jLabel9.setText("Genre");

        comboBoxGenre.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Fiction", "Novel", "Mystery", "Biography", "Thriller" }));
        comboBoxGenre.setMinimumSize(new java.awt.Dimension(300, 24));
        comboBoxGenre.setPreferredSize(new java.awt.Dimension(300, 24));
        comboBoxGenre.setSize(new java.awt.Dimension(300, 24));

        comboBoxLanguage.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Indonesian", "English" }));
        comboBoxLanguage.setMinimumSize(new java.awt.Dimension(300, 24));
        comboBoxLanguage.setPreferredSize(new java.awt.Dimension(300, 24));
        comboBoxLanguage.setSize(new java.awt.Dimension(300, 24));

        textFieldNumberOfPages.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N

        btnSelectAuthor.setText("...");
        btnSelectAuthor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSelectAuthorActionPerformed(evt);
            }
        });

        jLabel10.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        jLabel10.setText("Cover Image URL");

        textFieldCoverImageURL.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N

        btnSelectPublisher.setText("...");
        btnSelectPublisher.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSelectPublisherActionPerformed(evt);
            }
        });

        textFieldPublicationYear.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel2)
                    .addComponent(jLabel1)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(comboBoxLanguage, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(textFieldNumberOfPages, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel10)
                            .addComponent(textFieldCoverImageURL, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(textFieldTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(textFieldPublisher)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnSelectPublisher)))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(jLabel5)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(textFieldPublicationYear)
                                    .addComponent(textFieldISBN, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel8)
                                    .addComponent(jLabel9)
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                            .addComponent(textFieldAuthor)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(btnSelectAuthor))
                                        .addComponent(comboBoxGenre, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(btnClear, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnSave, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(120, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(textFieldAuthor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnSelectAuthor))
                        .addGap(12, 12, 12)
                        .addComponent(jLabel9))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(textFieldISBN, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(textFieldTitle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(12, 12, 12)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel5))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(textFieldPublisher, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnSelectPublisher)
                            .addComponent(textFieldPublicationYear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(comboBoxGenre, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(jLabel7)
                    .addComponent(jLabel10))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(comboBoxLanguage, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(textFieldNumberOfPages, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(textFieldCoverImageURL, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSave)
                    .addComponent(btnClear))
                .addContainerGap(24, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addComponent(pnlDataTable, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlDataTable, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
        setDataForm(null);
    }//GEN-LAST:event_btnClearActionPerformed

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        String title = textFieldTitle.getText();
        String ISBN = textFieldISBN.getText();
        String author = textFieldAuthor.getText();
        String publisher = textFieldPublisher.getText();
        int publicationYear = textFieldPublicationYear.getText().isBlank() ? 0 : Integer.parseInt(textFieldPublicationYear.getText());
        String genre = comboBoxGenre.getSelectedItem().toString();
        String language = comboBoxLanguage.getSelectedItem().toString();
        int numberOfPages = textFieldNumberOfPages.getText().isBlank() ? 0 : Integer.parseInt(textFieldNumberOfPages.getText());
        String coverImageURL = textFieldCoverImageURL.getText();

        // Fields validation
        if (title.isEmpty()) {
                AFDialog.showError(this, "Please fill the title field.");
                return;
            } else if (ISBN.isEmpty()) {
                AFDialog.showError(this, "Please fill the ISBN field.");
                return;
            } else if (author.isEmpty()) {
                AFDialog.showError(this, "Please fill the author field.");
                return;
            } else if (publisher.isEmpty()) {
                AFDialog.showError(this, "Please fill the publisher field.");
                return;
            } else if (publicationYear == 0) {
                AFDialog.showError(this, "Please fill the publication year field.");
                return;
            } else if (genre.isEmpty()) {
                AFDialog.showError(this, "Please fill the genre field.");
                return;
            } else if (language.isEmpty()) {
                AFDialog.showError(this, "Please fill the language field.");
                return;
            } else if (numberOfPages == 0) {
                AFDialog.showError(this, "Please fill the number of pages field.");
                return;
            } else if (coverImageURL.isEmpty()) {
                AFDialog.showError(this, "Please fill the cover image url field.");
                return;
            }

        if (editedBook != null) {
            saveData(false, editedBook.id, title, ISBN, selectedPublisher.id, publisher, publicationYear, genre, language, numberOfPages, coverImageURL);
        } else {
            saveData(true, 0, title, ISBN, selectedPublisher.id, publisher, publicationYear, genre, language, numberOfPages, coverImageURL);
        }
        regularDataTablePanel.populateData();
    }//GEN-LAST:event_btnSaveActionPerformed

    //object.title, object.isbn, object.publisherId, object.publicationYear, object.genre, object.language, object.pages, object.coverImageURL
    private void saveData(boolean isNewData, int id, String title, String isbn, int publisherId, String publisherName, int publicationYear, String genre, String language, int pages, String coverImage) {
        Book book = new Book(id, title, isbn, publicationYear, genre, language, pages, coverImage, selectedPublisher, selectedAuthor);
        try {
            if (isNewData) {
                repository.save(book);
                AFDialog.showMessage(this, "Book saved successfully.");
            } else {
                repository.update(book);
                AFDialog.showMessage(this, "Book updated successfully.");
            }
            setDataForm(null);
        } catch (Exception e) {
            AFDialog.showError(this, e.getLocalizedMessage());
        }
    }
    
    public void setDataForm(Book book) {
        this.editedBook = book;
        if (book != null) {
            textFieldTitle.setText(book.title);
            textFieldISBN.setText(book.isbn);
            textFieldAuthor.setText(book.author.firstName + " " + book.author.lastName);
            textFieldPublisher.setText(book.publisher.name);
            textFieldPublicationYear.setText(String.valueOf(book.publicationYear));
            
            comboBoxGenre.setSelectedIndex(Arrays.asList("Fiction", "Novel", "Mystery", "Biography", "Thriller").indexOf(book.genre));
            comboBoxLanguage.setSelectedIndex(Arrays.asList("Indonesian", "English").indexOf(book.language));
            textFieldNumberOfPages.setText(String.valueOf(book.pages));
            textFieldCoverImageURL.setText(book.coverImageURL);
            
            this.selectedPublisher = book.publisher;
            this.selectedAuthor = book.author;
        } else {
            clearForm();
        }
    }
    
    private void clearForm() {
        textFieldTitle.setText("");
        textFieldISBN.setText("");
        textFieldAuthor.setText("");
        textFieldPublisher.setText("");
        textFieldPublicationYear.setText("");
        comboBoxGenre.setSelectedIndex(0);
        comboBoxLanguage.setSelectedIndex(0);
        textFieldNumberOfPages.setText("");
        textFieldCoverImageURL.setText("");
    }
    
    private void btnSelectAuthorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSelectAuthorActionPerformed
        showAuthorSelector();
    }//GEN-LAST:event_btnSelectAuthorActionPerformed

    private void btnSelectPublisherActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSelectPublisherActionPerformed
        showPublisherSelector();
    }//GEN-LAST:event_btnSelectPublisherActionPerformed

    private void showAuthorSelector() {
        isSelectingPublisher = false;
        isSelectingAuthor = true;
        
        DataSelectorFrame frame = new DataSelectorFrame(this);
        frame.setTitle("Select Author");
        String[] column = {"Name", "Birthdate", "Nationality"};
        frame.setupTableColumn(column);
        
        frame.setVisible(true);
        frame.populateData();
    }
    
    private void showPublisherSelector() {
        isSelectingPublisher = true;
        isSelectingAuthor = false;
        
        DataSelectorFrame frame = new DataSelectorFrame(this);
        frame.setTitle("Select Publisher");
        String[] column = {"Name"};
        frame.setupTableColumn(column);
        
        frame.setVisible(true);
        frame.populateData();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnSave;
    private javax.swing.JButton btnSelectAuthor;
    private javax.swing.JButton btnSelectPublisher;
    private javax.swing.JComboBox<String> comboBoxGenre;
    private javax.swing.JComboBox<String> comboBoxLanguage;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel pnlDataTable;
    private javax.swing.JTextField textFieldAuthor;
    private javax.swing.JTextField textFieldCoverImageURL;
    private javax.swing.JTextField textFieldISBN;
    private javax.swing.JTextField textFieldNumberOfPages;
    private javax.swing.JTextField textFieldPublicationYear;
    private javax.swing.JTextField textFieldPublisher;
    private javax.swing.JTextField textFieldTitle;
    // End of variables declaration//GEN-END:variables

    @Override
    public void onEditClicked(int row) {
        setDataForm(books.get(row));
    }

    @Override
    public void onDeleteClicked(int row) {
        String id = String.valueOf(books.get(row).id);
        
        try {
            repository.delete(id);
            regularDataTablePanel.populateData();
        } catch (Exception ex) {
            AFDialog.showError(this, ex.getLocalizedMessage());
        }
    }

    @Override
    public void onPrintClicked() {
        try {
            String path = "src/modules/admin/books/BookReport.jasper";
            HashMap params = new HashMap();
            JasperPrint print = JasperFillManager.fillReport(path, params, repository.connection);
            JasperViewer.viewReport(print, false);
        } catch (Exception ex) {
            AFDialog.showError(this, ex.getLocalizedMessage());
        }
    }

    @Override
    public ArrayList<Object[]> provideData(String query) {
        books = new ArrayList<>();
        books = repository.populate(query);
        
        ArrayList<Object[]> data = new ArrayList<>();
        for(Book obj : books) {
            data.add(new Object[] {obj.title, obj.isbn, obj.publisher.name, obj.publicationYear, obj.genre, obj.language, obj.coverImageURL});
        }
        return data;
    }

    @Override
    public Pair<ArrayList<?>, ArrayList<Object[]>> dataSelectorProvideData(String query) {
        if (isSelectingAuthor) {
            AuthorRepository _repository = new AuthorRepository();
            ArrayList<Author> authors = _repository.populate(query);

            Pair<ArrayList<?>, ArrayList<Object[]>> data = new Pair<>(new ArrayList<>(), new ArrayList<>());
            data.first = authors;
            for(Author obj : authors) {
                data.second.add(new Object[] {obj.firstName + " " + obj.lastName, obj.dob, obj.nationality});
            }
            return data;
        } else if (isSelectingPublisher) {
            PublisherRepository _repository = new PublisherRepository();
            ArrayList<Publisher> publishers = _repository.populate(query);

            Pair<ArrayList<?>, ArrayList<Object[]>> data = new Pair<>(new ArrayList<>(), new ArrayList<>());
            data.first = publishers;
            for(Publisher obj : publishers) {
                data.second.add(new Object[] {obj.name});
            }
            return data;
        }
        return new Pair(null, null);
    }
    

    @Override
    public void dataSelectorOnDataSelected(Object data) {
        isSelectingPublisher = false;
        isSelectingAuthor = false;
        if (data instanceof Author author) {
            selectedAuthor = author;
            textFieldAuthor.setText(selectedAuthor.firstName + " " + selectedAuthor.lastName);
        } else if (data instanceof Publisher publisher) {
            selectedPublisher = publisher;
            textFieldPublisher.setText(selectedPublisher.name);
        }
    }
}
